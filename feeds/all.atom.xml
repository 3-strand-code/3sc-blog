<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>3 Strand Code Blog</title><link href="http://3-strand-code.github.io/3sc-blog/" rel="alternate"></link><link href="http://3-strand-code.github.io/3sc-blog/feeds/all.atom.xml" rel="self"></link><id>http://3-strand-code.github.io/3sc-blog/</id><updated>2015-11-20T10:20:00-08:00</updated><entry><title>Neural Networks Part 1: The Neuron</title><link href="http://3-strand-code.github.io/3sc-blog/neural-networks-part-1-the-neuron.html" rel="alternate"></link><updated>2015-11-20T10:20:00-08:00</updated><author><name>Eric Carmichael</name></author><id>tag:3-strand-code.github.io,2015-11-20:3sc-blog/neural-networks-part-1-the-neuron.html</id><summary type="html">&lt;p&gt;Last month we did the first part of a many part series about creating Neural Networks
from the ground up. I'll briefly cover some of what Levi went over but I won't do it
justice! You'll have to come to the meet-ups to get the full effect.&lt;/p&gt;
&lt;p&gt;What makes a neuron &lt;cont&gt;
 - connected through axons
 - fires with threshold&lt;/p&gt;
&lt;p&gt;&lt;img src="https://unsplash.it/700/300?image=0"&gt;&lt;/p&gt;
&lt;p&gt;How is it similar to the brain &lt;cont&gt;&lt;/p&gt;
&lt;p&gt;First we started by making an individual neuron and&lt;/p&gt;
&lt;p&gt;Connections, weights &lt;cont&gt;&lt;/p&gt;
&lt;p&gt;Activation functions&lt;/p&gt;
&lt;h3&gt;Bonus! Python tests&lt;/h3&gt;
&lt;p&gt;In Python a test is a function with some kind of assertion. The assertion is
a condition that evaluates to a boolean, the most simple example might be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_one_plus_one_equals_two&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can use tests to help maintain our code and get rid of unforeseen bugs. &lt;cont&gt;&lt;/p&gt;
&lt;p&gt;Here's an actual test from my &lt;a href="https://github.com/dev-coop/neural-net-hacking-examples/blob/master/python/neural_network_with_connections_tests.py"&gt;neuron example&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_connection_adds_to_incoming_and_outgoing_arrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Setup our neurons and connections&lt;/span&gt;
    &lt;span class="n"&gt;neuron&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Neuron&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;neuron_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Neuron&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;neuron&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neuron_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Let&amp;#39;s make sure that there&amp;#39;s at least one connection from our neuron to the next neuron&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neuron&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neuron&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;neuron_2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;incoming_neurons&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# And the same goes for the other neuron, make sure it&amp;#39;s connected to us&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neuron_2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neuron&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;neuron&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outgoing_neurons&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the above test passes, we can be sure our connections were made properly.&lt;/p&gt;
&lt;h3&gt;Example neurons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dev-coop/neural-net-hacking-examples/blob/master/elixir/neuron.exs"&gt;elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dev-coop/neural-net-hacking-examples/blob/master/es5/neuronet.js"&gt;javascript ES5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dev-coop/neural-net-hacking-examples/blob/master/es7/Neuron.js"&gt;javascript ES7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dev-coop/neural-net-hacking-examples/blob/master/ruby/karmen_neural_network.rb"&gt;ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dev-coop/neural-net-hacking-examples/blob/master/python/neural_network_with_connections.py"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dev-coop/neural-net-hacking-examples/blob/master/python/neural_network_with_connections_tests.py"&gt;python tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stay tuned for part 2 next month! We'll be layering and maybe even training our neurons!&lt;/p&gt;</summary><category term="neural networks"></category><category term="machine learning"></category><category term="coding"></category></entry></feed>